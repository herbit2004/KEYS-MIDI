# KEYS-MIDI 导出功能实现文档

## 一、核心实现概述

KEYS-MIDI项目采用纯JavaScript原生实现MIDI文件导出，不依赖外部MIDI处理库。导出功能由`MidiExporter`类实现，位于`js/MidiExporter.js`文件中。该实现直接按照MIDI文件规范构建二进制数据，支持多轨道、多种乐器、打击乐通道分离等MIDI标准特性。

## 二、MidiExporter类核心功能

### 1. 主要方法结构

```javascript
class MidiExporter {
  constructor() {
    this.PPQN = 480; // 每四分音符的脉冲数
    this.DRUM_CHANNEL = 9; // MIDI标准打击乐通道（10通道，0-based索引为9）
  }
  
  // 主导出方法
  export(tracks, bpm, instrumentConfig) { ... }
  
  // 创建MIDI文件数据
  createMidiFile(tracks, bpm, instrumentConfig) { ... }
  
  // 创建MIDI文件头部
  createMidiHeader() { ... }
  
  // 创建速度轨道
  createTempoTrack(bpm) { ... }
  
  // 创建乐器轨道
  createInstrumentTrack(track, channel, bpm, instrumentConfig) { ... }
  
  // 创建打击乐轨道
  createDrumTrack(tracks, bpm, instrumentConfig) { ... }
  
  // 其他辅助方法...
}
```

### 2. 导出流程详解

导出MIDI文件的完整流程包括以下关键步骤：

#### 1) 初始化并收集数据
调用`export`方法，传入轨道数据、BPM和乐器配置。

#### 2) 创建MIDI文件结构
通过`createMidiFile`方法构建完整的MIDI文件，包含：
- 调用`createMidiHeader`创建文件头部
- 调用`createTempoTrack`创建速度轨道
- 为每个非打击乐轨道调用`createInstrumentTrack`创建独立轨道
- 调用`createDrumTrack`合并所有打击乐轨道为一个专用通道

#### 3) 数据转换与事件生成
将项目内的音符数据转换为MIDI事件：
- 时间单位转换：通过`convertBeatsToTicks`将拍数转换为MIDI ticks
- 创建音符事件：通过`createNoteEvents`生成Note On和Note Off事件
- 计算相对时间：通过`calculateDeltaTimes`计算事件间的delta time

#### 4) 生成二进制数据
将所有事件转换为MIDI二进制数据：
- 调用`eventsToMidiData`转换事件列表
- 使用`writeVariableLength`处理可变长度值
- 通过`combineMidiData`合并所有轨道数据

#### 5) 文件下载
调用`downloadMidiFile`方法生成Blob并触发浏览器下载。

## 三、MIDI标准适配实现

### 1. 乐器编号映射

系统通过`getMidiProgram`方法实现项目音色到MIDI标准乐器编号的映射：

```javascript
getMidiProgram(instrumentId, instrumentConfig) {
  const config = instrumentConfig.getInstrumentConfig(instrumentId);
  if (config && config.midiProgram !== undefined) {
    return config.midiProgram;
  }
  
  // 默认映射表
  const defaultMapping = {
    'sampledPiano': 0,      // 声学大钢琴
    'sampledGuitar': 24,    // 钢弦吉他
    'sampledBass': 32,      // 声学贝斯
    'piano': 0,             // 声学大钢琴
    'guitar': 24,           // 钢弦吉他
    'electricGuitar': 27,   // 电吉他(清音)
    'bass': 32,             // 声学贝斯
    'strings': 48,          // 弦乐合奏1
    'synth': 80,            // 方波主音
    'pad': 89,              // 温暖 Pad
    'lead': 80,             // 方波主音
    'fx': 103               // 回声效果
  };
  
  return defaultMapping[instrumentId] || 0;
}
```

### 2. 打击乐通道处理

系统通过`isDrumInstrument`方法识别打击乐轨道，并将其统一分配到MIDI标准的打击乐通道（通道10，索引9）：

```javascript
isDrumInstrument(instrumentId) {
  const drumInstruments = ['sampledPercussion', 'percussion'];
  return drumInstruments.some(drum => instrumentId.includes(drum));
}
```

在`createDrumTrack`方法中，所有打击乐轨道被合并到单一的打击乐通道，确保符合MIDI标准。

### 3. 时间与速度规范

- **时间单位转换**：项目使用拍数作为内部时间单位，通过`convertBeatsToTicks`转换为MIDI ticks：
  ```javascript
  convertBeatsToTicks(beats, bpm) {
    return Math.round(beats * this.PPQN);
  }
  ```

- **速度设置**：通过`createTempoEvent`创建速度事件，将BPM转换为MIDI tempo值（微秒/四分音符）：
  ```javascript
  createTempoEvent(delta, tempo) {
    return {
      type: 'meta',
      delta: delta,
      metaType: 0x51, // Tempo
      data: [
        (tempo >> 16) & 0xFF,
        (tempo >> 8) & 0xFF,
        tempo & 0xFF
      ]
    };
  }
  ```

- **PPQN设置**：系统使用480作为固定的PPQN（每四分音符脉冲数），确保时间精度和兼容性。

### 4. 力度范围处理

项目内的音符力度直接映射到MIDI标准的0-127范围，在创建Note On事件时使用：

```javascript
createNoteOnEvent(time, channel, note, velocity) {
  return {
    type: 'channel',
    status: 0x90 | channel,
    data: [note, velocity]
  };
}
```

## 四、MIDI事件类型与结构

系统支持多种MIDI事件类型，确保导出文件符合标准：

### 1. 通道事件
- **Note On**：音符开始，状态码0x90
- **Note Off**：音符结束，状态码0x80
- **Program Change**：乐器切换，状态码0xC0

### 2. Meta事件
- **Tempo**：速度设置，类型0x51
- **Time Signature**：拍号设置，类型0x58
- **Track Name**：轨道名称，类型0x03
- **End of Track**：轨道结束，类型0x2F

### 3. 事件数据格式

所有MIDI事件均包含以下关键属性：
- `type`：事件类型（'channel'或'meta'）
- `delta`：相对于上一事件的时间差（ticks）
- `status`/`metaType`：事件状态码或元类型
- `data`：事件参数数据数组

## 五、MIDI文件二进制结构

系统严格按照MIDI文件规范构建二进制数据：

### 1. 文件头部

```javascript
createMidiHeader() {
  const header = new Uint8Array(14);
  // 四字符标识符 'MThd'
  header[0] = 0x4D; header[1] = 0x54; header[2] = 0x68; header[3] = 0x64;
  // 头部长度
  header[4] = 0; header[5] = 0; header[6] = 0; header[7] = 6;
  // 格式类型（0表示单轨道，1表示多轨道同步）
  header[8] = 0; header[9] = 1;
  // 轨道数量（后续会更新）
  header[10] = 0; header[11] = 0;
  // 每四分音符的脉冲数（PPQN）
  header[12] = (this.PPQN >> 8) & 0xFF;
  header[13] = this.PPQN & 0xFF;
  
  return header;
}
```

### 2. 轨道数据块

每个轨道包含头部和事件数据：

```javascript
createTrackChunk(events) {
  const trackData = this.eventsToMidiData(events);
  
  const trackHeader = new Uint8Array(8);
  // 四字符标识符 'MTrk'
  trackHeader[0] = 0x4D; trackHeader[1] = 0x54; trackHeader[2] = 0x72; trackHeader[3] = 0x6B;
  
  // 轨道数据长度
  const dataLength = trackData.length;
  trackHeader[4] = (dataLength >> 24) & 0xFF;
  trackHeader[5] = (dataLength >> 16) & 0xFF;
  trackHeader[6] = (dataLength >> 8) & 0xFF;
  trackHeader[7] = dataLength & 0xFF;
  
  // 组合头部和数据
  const trackChunk = new Uint8Array(8 + dataLength);
  trackChunk.set(trackHeader, 0);
  trackChunk.set(trackData, 8);
  
  return trackChunk;
}
```

### 3. 可变长度值编码

MIDI使用可变长度编码存储时间值，系统通过`writeVariableLength`方法实现：

```javascript
writeVariableLength(data, value) {
  if (value === 0) {
    data.push(0);
    return;
  }
  
  const bytes = [];
  while (value > 0) {
    bytes.unshift(value & 0x7F);
    value >>= 7;
  }
  
  // 设置除最后一个字节外的所有字节的最高位
  for (let i = 0; i < bytes.length - 1; i++) {
    bytes[i] |= 0x80;
  }
  
  data.push(...bytes);
}
```

## 六、文件下载实现

系统通过浏览器的Blob和URL API实现MIDI文件下载：

```javascript
downloadMidiFile(midiData) {
  const blob = new Blob([midiData], { type: 'audio/midi' });
  const url = URL.createObjectURL(blob);
  const a = document.createElement('a');
  a.href = url;
  a.download = `keys-midi-export-${new Date().toISOString().slice(0, 19).replace(/:/g, '-')}.mid`;
  
  document.body.appendChild(a);
  a.click();
  document.body.removeChild(a);
  URL.revokeObjectURL(url);
}
```

文件名包含时间戳，避免覆盖已有文件。

## 七、多轨道处理与时间对齐

系统确保多轨道MIDI文件的时间对齐，关键实现包括：

### 1. 统一时间基准
所有轨道使用相同的时间基准（项目的0点）和PPQN值。

### 2. 事件排序与delta time计算
每个轨道的事件按时间顺序排序，并计算正确的delta time：

```javascript
calculateDeltaTimes(events) {
  let lastTime = 0;
  return events.map(event => {
    const delta = event.time - lastTime;
    lastTime = event.time;
    return { ...event, delta };
  });
}
```

### 3. 全局速度轨道
系统创建独立的速度轨道，确保所有轨道使用相同的速度基准。

## 八、代码优化建议

### 1. 错误处理增强
当前实现缺乏对异常情况的处理，建议添加：

```javascript
export(tracks, bpm, instrumentConfig) {
  try {
    if (!tracks || tracks.length === 0) {
      console.warn('No tracks to export');
      return;
    }
    
    // 原有导出逻辑...
  } catch (error) {
    console.error('MIDI export failed:', error);
    // 可添加用户友好的错误提示
  }
}
```

### 2. 性能优化
对于大型项目，可考虑优化事件处理效率：

```javascript
// 优化前
notes.forEach(note => {
  events.push(...createNoteEvents(note));
});

// 优化后
const eventBatch = [];
notes.forEach(note => {
  eventBatch.push(...createNoteEvents(note));
});
events.push(...eventBatch);
```

### 3. 配置灵活性提升
将硬编码的PPQN值改为可配置参数：

```javascript
constructor(options = {}) {
  this.PPQN = options.ppqn || 480;
  this.DRUM_CHANNEL = options.drumChannel || 9;
}
```

## 九、兼容性测试建议

导出的MIDI文件应在主流音乐软件中进行测试，验证：

1. **乐器音色**：确认Program Change映射正确
2. **节奏时序**：检查音符时长和位置是否与项目一致
3. **多轨道同步**：验证不同轨道间的时间对齐
4. **打击乐通道**：确保打击乐正确分配到通道10

通过以上实现，KEYS-MIDI项目的MIDI导出功能完全符合MIDI标准，确保导出文件能在其他音乐软件中正常使用和编辑。